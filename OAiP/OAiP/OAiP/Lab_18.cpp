#include <stdio.h>
#include <math.h>
#include <locale.h>
#include <time.h>
#include <malloc.h>
#include <stdlib.h>
#include <windows.h>
#define k 1000

int arrt[1000] = { -894, 537, 612, -376, 157, -135, -603, -856, -162, 488, 481, -920, -328, 256, -618, 947, -7, 845, -146, -202, 601, 735, 582, 350, -272, -817, 477, -974, -477, 434, 799, -370, -30, 410, 254, -873, -725, 652, -729, 113, 140, 753, 194, 812, 9, 576, 759, -999, 421, -388, -200, 22, -653, -619, -629, 75, -435, 848, 101, 88, 282, -100, 718, -748, -690, -28, -620, -415, -377, -348, 699, 764, -596, -107, 576, 414, -531, 334, 415, 890, 947, -786, -88, -707, -404, 284, 369, 161, 132, -530, -752, -587, 370, 967, -334, 681, -62, 46, -734, 562, 698, 966, 325, -898, -142, -99, 516, 327, -765, -69, 217, -819, 145, -872, -525, 742, 412, 845, -98, -457, -686, 151, -43, 685, 117, 623, 365, -945, -331, 631, 617, -633, 597, -58, -530, -546, 843, 987, 782, -922, -83, -2, -740, -938, 127, -265, 804, -462, -420, -294, 82, -106, 858, -961, -421, -26, 662, 944, 29, -669, 575, -354, -301, 171, 588, 170, 626, 431, 156, 407, 509, -927, -595, 770, -865, 532, -496, 940, -930, 85, -354, 153, 979, -497, 192, -443, 478, -146, -499, -493, 185, -924, 153, 885, 248, -259, 54, -127, -828, -791, -720, 682, -718, -315, 451, -582, -783, 956, -642, -713, 40, 4, 440, 19, 507, -369, 576, -15, 486, -923, 492, -330, -846, -355, -445, 402, 386, 609, -725, 559, 819, -445, 240, -899, 240, -310, -480, 457, -354, -122, 745, 686, 882, 185, -296, 389, 817, -720, -627, 302, -642, 866, 973, -488, -490, -473, 914, 897, -864, -812, 455, 956, -256, -306, -944, 985, 385, -424, 442, -970, 455, 186, 717, 337, -630, -579, -275, -814, -298, 99, 489, 60, -36, 461, 572, 475, 988, 486, 371, -877, 675, -174, -922, -582, 521, -865, -597, -95, -288, 845, -64, -834, 30, -347, 503, 401, 74, -772, 588, 776, 328, 76, -165, -709, -463, -593, 767, -476, 894, 138, -352, 569, 964, -273, 988, 484, -137, -610, -611, 575, -766, 325, 742, 265, 978, 245, -334, 52, 473, -746, -173, -200, 331, 663, 92, 868, -930, -142, -609, 965, 996, 40, 533, 960, 768, 521, 443, -370, 911, 832, -796, -855, 157, 947, 411, 135, 191, -924, -814, -337, -669, 14, 464, 662, -323, -445, 529, -252, 414, 921, -288, 410, -39, -755, 369, -272, 766, -188, 358, 677, -356, 563, 822, 801, 509, 233, -64, -301, 310, 123, 363, 641, -864, -174, 302, -186, 381, -169, 562, -205, -248, -726, -796, 713, -481, 574, -560, -715, -615, 798, 962, 29, 360, 784, -170, -131, 16, 766, 568, -675, -112, -70, 967, 25, 756, 268, 839, 137, -901, 401, 932, -149, 675, -864, -437, -806, 710, 3, -520, -905, -199, -559, 124, -839, -775, 955, 30, 242, 721, -402, 568, -392, 529, 534, 634, 284, -198, 473, -579, -98, -127, -647, 753, -452, -511, -684, -257, -801, 320, 223, -706, -880, 664, 419, -718, 890, 373, 313, 132, 94, 911, -301, 703, 439, -767, 336, -277, 36, -191, 145, 938, 682, 498, 690, -770, 988, -994, -27, -814, 326, -805, -520, 447, 860, 900, 729, 750, 273, 42, -119, -634, -48, 581, -932, -609, 814, 405, 115, -151, -787, -741, -213, 896, 757, -523, -875, 744, -517, 99, 931, 810, 294, -590, 256, 154, -690, -15, -97, 583, -974, 784, 949, -21, 365, -983, 371, 178, 422, -515, -973, 635, -255, -186, 531, -499, 292, 656, -755, 775, -245, -825, 584, -952, -414, -160, 203, -104, 825, -894, -521, 852, 891, -572, -169, 255, -555, -799, -568, 868, -313, -540, 502, 432, 275, 33, 934, -434, -312, -821, -659, 443, -646, 926, 492, -59, -235, -305, 838, -410, -199, -684, -558, -309, -255, 273, 946, 190, 475, -622, 57, -838, -161, -441, 594, -887, 592, 527, -320, -720, 706, 21, 724, -940, -53, 216, 2, 713, 911, -161, -697, -289, 156, -255, 403, 901, -982, 349, 91, 494, 727, -852, 656, -435, -293, 250, -321, -701, -224, 359, -421, -518, -620, -698, -457, 327, 519, 546, 40, 429, -616, 343, -860, 541, -912, 544, 442, -894, -108, -467, 601, -382, -319, 256, 184, 389, -494, 863, 688, 282, 222, -733, 765, 602, -430, -692, -71, -912, 854, 969, 518, -762, 312, 658, 780, 400, 201, 222, 507, -907, 755, 107, -289, -564, -637, 896, 825, -131, 758, 512, -849, -21, 780, 917, -419, -651, -775, 510, -563, -922, 479, 955, -683, -210, 613, -904, -810, -186, 318, 697, -93, 73, -196, 619, 509, 167, 514, 333, -964, 271, -155, -812, -750, -376, -895, -169, -27, -670, -659, 411, -592, 821, 365, -274, -390, -22, -178, -200, 792, -860, -503, -302, 213, 301, -684, -279, -532, 831, -946, -496, 102, -100, -307, 352, 524, -202, -817, -503, 128, -475, 909, 537, -655, 274, -738, -44, -749, 84, 757, -957, 224, -747, -259, -563, 554, 58, 159, -979, -112, 213, -474, 990, -888, 219, 342, 637, -983, 526, -866, 145, -950, -957, -319, -605, 317, -57, 352, 568, -973, 108, 611, 252, 361, -648, 689, -85, 411, -152, -63, -701, -939, 464, -711, -826, -317, 632, 811, -300, 157, 946, 846, 207, 989, -474, 603, 305, 470, -45, -127, 498, -938, -516, -251, 424, -163, -562, -661, -753, 286, 276, -453, 347, -260, -164, 521, 423, -533, 332, -877, 625, 278, 969, -169, 267, -505, -566, -428, 965, 389, 445, 462, 452, 930, -789, -125, -233, -351, 215, 15, 936, -509, 562, 283, 231, -602, -196, -346, -135, -864, -223, -510, 414, -254, 321, -320, 241, 756, 252, 205, 145, -303, -333, -404, -373, -122, 472, 394, 528, -314, -592, 463, 178, 971, -255, -592, -632, 550, 63, 234, 686, 840, 724, 100, -415, 45, 781, 826, -200, 33, 31, 946, 730, 698, -459, -643, -424, -987, 751, -897, -300, -841, 566, 878, -871, -689, -714, -502, 861, 349, 732, 547, 189, 455, -354, 774, -501, -574, 600, 300, 459, -369, 245, 189, -672, 787, 546, -96, 801, 297, 8, -500, 457, -427, -622, 587, -116, -336, -916, -255, -988, 77 }; int arr[1000]; int arr8[1000];

void QSort(int* arr, int b, int e)
{
	if (b < e)
	{
		int l = b, r = e, m = arr[(l + r) / 2], temp;
		for (; l <= r; ) // do
		{
			while (arr[l] < m)
				l++;
			while (arr[r] > m)
				r--;
			if (l <= r)
			{
				temp = arr[l];
				arr[l] = arr[r];
				arr[r] = temp;
				l++;
				r--;
			}
		}
		// while (l<=r);
		QSort(arr, b, r);
		QSort(arr, l, e);
	}
}
void Swipe(int i)
{
	for (int r = k; r > i; r--)
	{
		arr8[r] = arr8[r - 1];
	}
	return;
}

int main()
{
	int z;
	LARGE_INTEGER frequency;
	LARGE_INTEGER start;
	LARGE_INTEGER end;
	double interval;
	
	setlocale(LC_ALL, "Rus");

	for (int i = 0; i < k; i++)
		arr[i] = arrt[i];
	QueryPerformanceFrequency(&frequency);
	QueryPerformanceCounter(&start);
	for (int i = 1; i < k; i++)
	{
		for (int j = 0; j < k - i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				z = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = z;
			}
		}
	}
	QueryPerformanceCounter(&end);
	interval = (double)(end.QuadPart - start.QuadPart) / frequency.QuadPart;
	printf("\nВремы выполнение алгоритма №4-5: %f \n", interval);

	for (int i = 0; i < k; i++)
		arr[i] = arrt[i];
	QueryPerformanceFrequency(&frequency);
	QueryPerformanceCounter(&start);
	for (int step = k - 1; step >= 1; step /= 1.247)
	{
		for (int i = 0; i < k - step; i++)
		{
			if (arr[i] > arr[i + step])
			{
				z = arr[i];
				arr[i] = arr[i + step];
				arr[i + step] = z;
			}
		}
	}
	QueryPerformanceCounter(&end);
	interval = (double)(end.QuadPart - start.QuadPart) / frequency.QuadPart;
	printf("\nВремы выполнение алгоритма №6-7: %f \n", interval);

	QueryPerformanceFrequency(&frequency);
	QueryPerformanceCounter(&start);
	arr8[0] = arrt[0];
	for (int r = 1; r < k; r++)
	{
		z = arrt[r];
		for (int i = 0; i < r; i++)
		{
			if (z < arr8[i])
			{
				Swipe(i);
				arr8[i] = z;
				break;
			}
			else if (i == r - 1 && z > arr8[i])
			{
				arr8[i + 1] = z;
				break;
			}
		}
	}
	QueryPerformanceCounter(&end);
	interval = (double)(end.QuadPart - start.QuadPart) / frequency.QuadPart;
	printf("\nВремы выполнение алгоритма №8-9: %f \n", interval);

	for (int i = 0; i < k; i++)
		arr[i] = arrt[i];
	int j;
	QueryPerformanceFrequency(&frequency);
	QueryPerformanceCounter(&start);
	for (int d = k / 2; d > 0; d /= 2)
	{
		for (int i = d; i < k; i++)
		{
			z = arr[i];
			for (j = i; j >= d; j -= d)
			{
				if (z < arr[j - d])
					arr[j] = arr[j - d];
				else
					break;
			}
			arr[j] = z;
		}
	}
	QueryPerformanceCounter(&end);
	interval = (double)(end.QuadPart - start.QuadPart) / frequency.QuadPart;
	printf("\nВремы выполнение алгоритма №10-11: %f \n", interval);

	for (int i = 0; i < k; i++)
		arr[i] = arrt[i];
	int temp;
	QueryPerformanceFrequency(&frequency);
	QueryPerformanceCounter(&start);
	int min;
	for (int i = 0; i < k-1; i++)
	{
		min = i;
		z = arr[i];
		for (int h = i+1; h < k; h++)
		{
			if (arr[h] > arr[min])
			{
				min = h;
				z = arr[min];
			}
		}
		temp = arr[i];
		arr[i] = z;
		arr[min] = temp;
	}
	QueryPerformanceCounter(&end);
	interval = (double)(end.QuadPart - start.QuadPart) / frequency.QuadPart;
	printf("\nВремы выполнение алгоритма №12-13: %f \n", interval);

	for (int i = 0; i < k; i++)
		arr[i] = arrt[i];
	z = 2;
	QueryPerformanceFrequency(&frequency);
	QueryPerformanceCounter(&start);
	for (int i = 1; i < k;)
	{
		if (arr[i - 1] > arr[i])
		{
			temp = arr[i];
			arr[i] = arr[i - 1];
			arr[i - 1] = temp;
			i--;
			if (i > 0) continue;
		}
		i = z++;
	}
	QueryPerformanceCounter(&end);
	interval = (double)(end.QuadPart - start.QuadPart) / frequency.QuadPart;
	printf("\nВремы выполнение алгоритма №14-15: %f \n", interval);

	for (int i = 0; i < k; i++)
		arr[i] = arrt[i];
	QueryPerformanceFrequency(&frequency);
	QueryPerformanceCounter(&start);
	QSort(arr, 0, k - 1);
	QueryPerformanceCounter(&end);
	interval = (double)(end.QuadPart - start.QuadPart) / frequency.QuadPart;
	printf("\nВремы выполнение алгоритма №16-17: %f \n", interval);
}
